name: Stage Tests
run-name: üß™ Stage Tests

on:
  # schedule:
   # - cron: '0 7 * * 1,3,5' # STAGE will run on weekdays at 09:00 (Kiev TZ) / 05:00 EST
  push:
    branches:
      - template
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run the tests against'
        required: true
        default: 'STAGE'
        type: choice
        options:
          - STAGE
      test_suite:
        description: 'Test suite(s) to run'
        required: true
        default: 'E2E'
        type: choice
        options:
          - E2E
          - API
          - ALL

# variables https://github.com/alexzavg/playwright_test_js/settings/variables/actions
env:
  E2E:                    ${{vars.E2E_TESTS_STAGE}}
  API:                    ${{vars.API_TESTS_STAGE}}
  SLACK_CHANNEL:          ${{vars.SLACK_CHANNEL}}
  SLACK_WEBHOOK:          ${{vars.SLACK_WEBHOOK}}
  SLACK_USER:             ${{vars.SLACK_USER}}
  TZ:                     ${{vars.TZ}}
  CI_PIPELINE_URL:        "https://github.com/alexzavg/playwright_test_js/actions/runs/${{github.run_id}}"
  REPORT_URL:             ${{vars.REPORT_URL_STAGE}}
  NODE_VERSION:           22.x

jobs:
  run_stage_tests:
    name: ‚öôÔ∏è Run STAGE Tests
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 7 * * 1,3,5' || github.event.inputs.environment == 'STAGE'
    steps:
    - name: üîé List all environment variables
      run: env | sort

    - name: Checkout
      uses: actions/checkout@v4

    - name: üìó Use node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: üîΩ Install dependencies
      id: install_deps
      run: |
        npm ci
        npx playwright install chrome

    - name: üìù Create .env file
      run: echo "${{secrets.CONFIG_STAGE}}" > .env.stage

    - name: ‚öôÔ∏è Run e2e tests
      id: run_e2e_stage
      if: steps.install_deps.outcome == 'success' && (github.event_name == 'schedule' || github.event.inputs.test_suite == 'E2E' || github.event.inputs.test_suite == 'ALL')
      run: |
        xvfb-run npm run $E2E

    - name: ‚öôÔ∏è Run API tests
      id: run_api_stage
      if: steps.install_deps.outcome == 'success' && (github.event_name == 'schedule' || github.event.inputs.test_suite == 'API' || github.event.inputs.test_suite == 'ALL')
      run: |
        xvfb-run npm run $API

    - name: Deploy to GitHub Pages
      if: always()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: html_report
        destination_dir: stage_report

    - name: Notify Slack about success
      if: success()
      run: |
        curl -X POST -H 'Content-type: application/json' --data "{\"channel\":\"$SLACK_CHANNEL\",\"username\":\"Playwright\",\"attachments\":[{\"color\":\"#2EB67D\",\"text\":\":test_tube: :white_check_mark: Test suite *$TEST_SUITE* has succeeded, :book: <$CI_PIPELINE_URL|VIEW LOGS>, :bar_chart: <$REPORT_URL|VIEW REPORT>\",\"footer\":\"Time: $(TZ=$TZ date)\"}]}" $SLACK_WEBHOOK
  
    - name: Notify Slack about failure
      if: failure()
      run: |
        curl -X POST -H 'Content-type: application/json' --data "{\"channel\":\"$SLACK_CHANNEL\",\"username\":\"Playwright\",\"attachments\":[{\"color\":\"#E01E5A\",\"text\":\":test_tube: :x: Test suite *$TEST_SUITE* has failed, :book: <$CI_PIPELINE_URL|VIEW LOGS>, :bar_chart: <$REPORT_URL|VIEW REPORT>, <$SLACK_USER>\",\"footer\":\"Time: $(TZ=$TZ date)\"}]}" $SLACK_WEBHOOK

    - name: Notify Slack about cancellation
      if: cancelled()
      run: |
        curl -X POST -H 'Content-type: application/json' --data "{\"channel\":\"$SLACK_CHANNEL\",\"username\":\"Playwright\",\"attachments\":[{\"color\":\"#808080\",\"text\":\":test_tube: :black_square_for_stop: Test suite *$TEST_SUITE* was cancelled, :book: <$CI_PIPELINE_URL|VIEW LOGS>, :bar_chart: <$REPORT_URL|VIEW REPORT>, <$SLACK_USER>\",\"footer\":\"Time: $(TZ=$TZ date)\"}]}" $SLACK_WEBHOOK
  